---
- name: root-authorized-keys | Ensure root .ssh directory exists
  ansible.builtin.file:
    path: /root/.ssh
    state: directory
    owner: root
    group: root
    mode: "0700"

- name: root-authorized-keys | Check for existing /root/.ssh/authorized_keys
  ansible.builtin.stat:
    path: /root/.ssh/authorized_keys
  register: root_authorized_keys_check

- name: root-authorized-keys | Slurp authorized_keys content
  ansible.builtin.slurp:
    src: /root/.ssh/authorized_keys
  register: root_authorized_keys
  when:
    - root_authorized_keys_check.stat.exists

- name: root-authorized-keys | Generate complete list of authorized_keys from existing file and keys found in ssh_users
  ansible.builtin.set_fact:
    combined_keys: "{{ (((root_authorized_keys.content|default('') | b64decode) | split('\n')) + (ssh_users | dict2items | map(attribute='value.pubkey'))) | flatten
      | reject('equalto', '') | map('regex_replace', '^(ssh-[a-z0-9]+)\\s(.+)\\s.*$', '\\1 \\2') | unique  }}"

- name: root-authorized-keys | Generate root authorized_keys file
  ansible.builtin.template:
    src: root_authorized_keys.j2
    dest: /root/.ssh/authorized_keys
    owner: root
    group: root
    mode: "0600"
    backup: false

- name: root-authorized-keys | Change root password
  ansible.builtin.user:
    name: root
    password: "{{ root_password | password_hash(salt=root_password_salt) }}"
    update_password: always
  when:
    - root_password is defined and (root_password|length) >= 8
    - root_password_salt is defined and (root_password_salt|length) > 0
